Usage

DbConnection conn;
DbTransaction t(conn);
EnforcerZone zone(t);
zone.getByName(name);
if (zone.empty()) {
    // error
    t.rollback();
    return;
}
cout << zone.name << endl;


std::vector<KeyData> keys = zone.keys();
for (std::vector<KeyData>::iterator i = keys.begin(); i != keys.end(); i++) {
    // do stuff with key *i
    cout << "Locator: " << (*i).locator << endl;
}

KeyData key(transaction);
key.getByLocator("...");
if (key.empty()) { return; }
key.locator = "";
key.update();


KeyData key(conn);
key.locator("ABC");
key.create();
zone.addKey(key);
zone.update();

t.commit();

class DbData {
};

class DbObject {
    map<std::string, DbData> data;
    DbConnection& connection;
protected:    
    void query(...) {
    }
    const DbData& getData(const std::string& name) {
    }
    const std::string& getData(const std::string& name) {
    }
    const DbData& getData(const std::string& name) {
    }
    const DbData& getData(const std::string& name) {
    }
    const DbData& getData(const std::string& name) {
    }
    void setData(const std::string& name, const DbData& data) {
    }
public:
    bool empty(void) {
    }
    void update(void) {
    }
    void create(void) {
    }
};

class KeyData : public DbObject {
    KeyData(DbConnection& connection) : DbObject(connection);
    
    void getById(const std::string& id) {
        query(new DbClause());
    }
    
    const std::string& locator(void) {
        return getData("locator");
    }
};



class KeyData {
    DbObject data;
    
public:
    KeyData() : data("key_data");
    KeyData(DbObject data) : data(data);
    
    void locator(const std::string new_value) {
        data.setValue("locator", new_value);
    }
    
    void create(void) {
        data.create();
    }

    void getByName(const std::string name) {
        data.query(new DbClause("name", DB_CLAUSE_EQ, name));
    }
}


class EnforcerZone {
    DbObject data;
    
public:
    void addKey(const KeyData &key) {
        conn.linkObject(data, key);
    }


}



class DbValue {
    enum dbValueType;
    void *dbValueData;
public:
    virtual operator=();
};

class DbObject {
    std::string dbObjectClass;
protected:
    virtual setObjectValue();
    virtual setObjectValues(db_values_t);
    dbCreate();
    dbRead();
    dbUpdate();
    dbDelete();
public:
    DbObject(std::string objectClass) : dbObjectClass(objectClass);
    virtual create();
    virtual update();
    virtual delete();
};

class KeyData : public DbObject {
protected:
    setObjectValue(std::string name, DbValue value) {
        if (name == "locator") {
            locator = value;
        }
    }
public:
    std::string locator;
    create() {
        db_values_t values;
        values.insert(db_value_t("locator", locator));
        dbCreate(values);
    }
    getByLocator(std::string findLocator) {
        db_clauses_t clauses;
        clauses.insert(db_clause_t("locator", DB_CLAUSE_EQ, findLocator));
        dbRead(clauses);
    }
};



