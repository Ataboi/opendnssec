Usage

DbConnection conn;

DbTransaction t(conn);

EnforcerZone zone(conn);
zone.getByName(name);
if (zone.empty()) {
    // error
    t.rollback();
    return;
}

std::vector<KeyData> keys = zone.keys();
for (std::vector<KeyData>::iterator i = keys.begin(); i != keys.end(); i++) {
    // do stuff with key *i
    cout << "Locator: " << (*i).locator() << endl;
}

KeyData key(conn);
key.locator("ABC");
key.create();
zone.addKey(key);
zone.update();

t.commit();

class DbData {
};

class DbObject {
    map<std::string, DbData> data;
    DbConnection& connection;
protected:    
    void query(...) {
    }
    const DbData& getData(const std::string& name) {
    }
    const std::string& getData(const std::string& name) {
    }
    const DbData& getData(const std::string& name) {
    }
    const DbData& getData(const std::string& name) {
    }
    const DbData& getData(const std::string& name) {
    }
    void setData(const std::string& name, const DbData& data) {
    }
public:
    bool empty(void) {
    }
    void update(void) {
    }
    void create(void) {
    }
};

class KeyData : public DbObject {
    KeyData(DbConnection& connection) : DbObject(connection);
    
    void getById(const std::string& id) {
        query(new DbClause());
    }
    
    const std::string& locator(void) {
        return getData("locator");
    }
};



class KeyData {
    DbObject data;
    
public:
    KeyData() : data("key_data");
    KeyData(DbObject data) : data(data);
    
    void locator(const std::string new_value) {
        data.setValue("locator", new_value);
    }
    
    void create(void) {
        data.create();
    }

    void getByName(const std::string name) {
        data.query(new DbClause("name", DB_CLAUSE_EQ, name));
    }
}


class EnforcerZone {
    DbObject data;
    
public:
    void addKey(const KeyData &key) {
        conn.linkObject(data, key);
    }


}

